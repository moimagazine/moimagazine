// Generated by CoffeeScript 1.7.1
(function() {
  define(['cs!apps/pteApp', 'cs!jcrop-api', 'cs!jquery', 'cs!settings'], function(app, jcrop, $, settings) {
    app.controller("CropCtrl", [
      '$scope', '$log', function($scope, $log) {
        $scope.$watch('pteCropSave', function(x, y) {
          if (x === y) {
            return;
          }
          $scope.updateOptions({
            'pte_crop_save': $scope.pteCropSave ? 'true' : 'false'
          });
        });
        $scope.userDisabledFitCrop = false;
        $scope.$watch('aspectRatio', function() {
          var ar;
          ar = $scope.aspectRatio || null;
          if (ar === null) {
            if ($scope.userDisabledFitCrop) {
              $scope.setInfoMessage($scope.i18n.crop_problems);
            } else {
              $scope.pteFitCrop = true;
              $scope.pteFitCropColor = settings.i18n.transparent;
            }
          }
          jcrop.setOptions({
            aspectRatio: ar
          });
        });
        $scope.$watch('cropConstraints', function() {
          var cropConstraints;
          cropConstraints = $scope.cropConstraints || [null, null, false];
          jcrop.setOptions({
            cropConstraints: cropConstraints
          });
        });
        $scope.changeAR = function() {
          return $scope.userChanged = true;
        };
        $scope.toggleOptions = function() {
          $scope.cropOptions = !$scope.cropOptions;
          if (!$scope.cropOptions) {
            $scope.aspectRatio = null;
            $scope.userChanged = false;
            $scope.pteJpgCompression = null;
            $scope.updateSelected();
          }
        };
        $scope.fitToCrop = function(e) {
          var color;
          if (!$("#pteFitCrop").prop('checked')) {
            $scope.userDisabledFitCrop = true;
            $scope.setInfoMessage($scope.i18n.crop_problems);
            return;
          }
          color = $scope.pteFitCropColor || "";
          $("#pte-iris-dialog").find("input").val(color).iris({
            hide: false
          }).end().dialog({
            dialogClass: "wp-dialog",
            buttons: [
              {
                text: settings.i18n.fitCrop_transparent,
                click: function() {
                  $scope.$apply("pteFitCropColor = '" + settings.i18n.transparent + "'");
                  return $(this).dialog('close');
                }
              }, {
                text: settings.i18n.fitCrop_save,
                click: function() {
                  $scope.$apply("pteFitCropColor = '" + $("input", this).val() + "'");
                  return $(this).dialog('close');
                }
              }
            ]
          });
        };

        /*
         * Change the AspectRatio based on the selected thumbnails
         *
         * This will create some interesting issues with the new option that
         * allows the user to manually set the aspectRatio, so I need to step
         * through the different options and it would be a good idea to actually
         * create some sort of a unit test to verify that they actually work.
         *
         * 1. If the user has previously selected an AR, this is the default AR
         *    until the user closes the options. If the user clears the AR
         *    manually with the refresh button, respect that.
         *
         * 2. If wordpress' crop setting is set then set the AR.
         *
         * 3. In order to set the AR, each selected thumbnail needs to have the
         *    same AR.
         *
         * 4. For the default AR: Use the original images width/height
         *
         */
        $scope.updateSelected = function() {
          var ar, crop, cropConstraints, cropH, cropW, error, height, isAR, selected, thumbnail, tmp_ar, width, _i, _len, _ref;
          $scope.setInfoMessage(null);
          if ($scope.userChanged) {
            return;
          }
          ar = null;
          cropConstraints = [null, null, false];
          try {
            selected = false;
            _ref = $scope.thumbnails;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              thumbnail = _ref[_i];
              crop = thumbnail.crop, width = thumbnail.width, height = thumbnail.height;
              crop = +crop;
              width = +width;
              height = +height;
              tmp_ar = width / height;
              if (thumbnail.selected) {
                cropW = cropConstraints[0], cropH = cropConstraints[1], isAR = cropConstraints[2];
                if (!cropW || (0 < width && cropW < width)) {
                  cropW = width;
                }
                if (!cropH || (0 < height && cropH < height)) {
                  cropH = height;
                }
                isAR = isAR || crop;
                cropConstraints = [cropW, cropH, isAR];
                selected = true;
              }
              if (thumbnail.selected && crop > 0) {
                if (ar !== null && (tmp_ar + 0.01 < ar || ar < tmp_ar - 0.01)) {
                  throw "PTE_EXCEPTION";
                }
                ar = tmp_ar;
              }
            }
            if (ar === null && selected === false) {
              ar = settings.width / settings.height;
            }
          } catch (_error) {
            error = _error;
            ar = null;
          }
          $scope.aspectRatio = ar;
          $scope.cropConstraints = cropConstraints;
        };

        /*
         * Submit Crop to server
         */
        $scope.submitCrop = function() {
          var color, crop_options, crop_results, h, selected_thumbs, w, x, x2, y, y2, _ref, _ref1;
          if ($scope.cropInProgress) {
            return;
          }
          $scope.cropInProgress = true;
          selected_thumbs = $.map($scope.thumbnails, function(thumb, i) {
            if (thumb.selected) {
              return thumb.name;
            } else {
              return null;
            }
          });
          if (selected_thumbs.length === 0) {
            $scope.setErrorMessage($scope.i18n.no_t_selected);
            $log.error($scope.i18n.no_t_selected);
            $scope.cropInProgress = false;
            return;
          }
          _ref = jcrop.tellSelect(), x = _ref.x, y = _ref.y, w = _ref.w, h = _ref.h, x2 = _ref.x2, y2 = _ref.y2;
          if (x === 0 && y === 0 && w === 0 && h === 0 && x2 === 0 && y2 === 0) {
            $scope.setErrorMessage($scope.i18n.no_c_selected);
            $log.error($scope.i18n.no_c_selected);
            $scope.cropInProgress = false;
            return;
          }
          crop_options = {
            'pte-action': 'resize-images',
            'id': settings.id,
            'pte-sizes[]': selected_thumbs,
            'w': w,
            'h': h,
            'x': x,
            'y': y
          };
          if ($scope.pteCropSave) {
            crop_options['save'] = 'true';
          }
          if ((0 <= (_ref1 = +$scope.pteJpgCompression) && _ref1 <= 100)) {
            crop_options['pte-jpeg-compression'] = $scope.pteJpgCompression;
          }
          if ($scope.pteFitCrop) {
            color = $scope.pteFitCropColor || "";
            if (color === settings.i18n.transparent) {
              color = "";
            }
            crop_options['pte-fit-crop-color'] = color;
          }
          crop_results = $scope.thumbnailResource.get(crop_options, function() {
            $scope.cropInProgress = false;
            if (crop_results != null ? crop_results.immediate : void 0) {
              return $scope.confirmResults(crop_results);
            }
            $scope.setNonces({
              'pte-nonce': crop_results['pte-nonce'],
              'pte-delete-nonce': crop_results['pte-delete-nonce']
            });
            $.each($scope.thumbnails, function(i, thumb) {
              var proposed;
              if (crop_results.thumbnails[thumb.name]) {
                proposed = {
                  url: crop_results.thumbnails[thumb.name].url,
                  file: crop_results.thumbnails[thumb.name].file
                };
                thumb.proposed = proposed;
                thumb.showProposed = true;
              }
            });
            $scope.view(true);
          });
        };
        $scope.cropText = function() {
          if ($scope.pteCropSave === true) {
            return $scope.i18n.cropSave;
          }
          return $scope.i18n.crop;
        };

        /*
         * Listener
         */
        $scope.$on('thumbnail_selected', function(event) {
          $scope.updateSelected();
        });
        $scope.updateSelected();
      }
    ]);
    return app;
  });

}).call(this);
