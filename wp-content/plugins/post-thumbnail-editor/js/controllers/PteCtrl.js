// Generated by CoffeeScript 1.7.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['angular', 'cs!apps/pteApp', 'cs!settings', 'cs!jquery'], function(angular, app, settings, $) {
    app.controller("PteCtrl", [
      '$scope', '$resource', '$log', '$filter', function($scope, $resource, $log, $filter) {

        /*
         * Page handling feature
         *
         * Switch the enabled page to change the view
         */
        var addToAspectRatios, checkFilter, deleteTemp, id, nonces;
        $scope.page = {
          loading: true,
          crop: false,
          view: false
        };
        $scope.changePage = function(page) {
          var key, value, _ref, _results;
          $scope.viewFilterValue = false;
          _ref = $scope.page;
          _results = [];
          for (key in _ref) {
            value = _ref[key];
            if (key === page) {
              _results.push($scope.page[key] = true);
            } else {
              _results.push($scope.page[key] = false);
            }
          }
          return _results;
        };

        /*
         * Set the Tab Class to active when the page is enabled
         *
         * This is watched by the view on a ng-class directive.
         */
        $scope.pageClass = function(page) {
          if ($scope.page[page]) {
            return "nav-tab-active";
          }
        };

        /*
         * Resource
         */
        $scope.thumbnailResource = $resource(settings.ajaxurl, {
          'action': 'pte_ajax',
          'pte-action': 'get-thumbnail-info'
        });

        /*
         * Catch the thumbnail selected event and broadcast to all the children scopes
         */

        /*
         * Publish selected event
         */
        $scope.updateSelected = function() {
          return $scope.$broadcast('thumbnail_selected');
        };

        /*
         * Update options
         *
         * Use this to update user/site options
         */
        $scope.updateOptions = function(update_options) {
          var updated;
          update_options['pte-action'] = 'change-options';
          update_options['pte-nonce'] = settings.options_nonce;
          $log.log("Updating Options", update_options);
          updated = $scope.thumbnailResource.get(update_options, function() {
            return $log.log("Updated options");
          });
        };

        /*
         * ViewFilter is a filter expression that checks if the viewFilter specifies
         * certain thumbnail names to display or if it should just be all modified.
         * 
         * Using the tab buttons will reset this feature.
         */
        $scope.viewFilterValue = false;
        $scope.view = function(val) {
          if (typeof event !== "undefined" && event !== null) {
            if (typeof event.stopPropagation === "function") {
              event.stopPropagation();
            }
          }
          $scope.changePage('view');
          $scope.viewFilterValue = val;
        };
        $scope.viewFilterFunc = function(thumbnail) {
          var _ref;
          if ($scope.viewFilterValue === false) {
            return true;
          }
          if (angular.isString($scope.viewFilterValue)) {
            if (thumbnail.name === $scope.viewFilterValue) {
              return true;
            } else {
              return false;
            }
          }
          if (angular.isArray($scope.viewFilterValue)) {
            if (_ref = thumbnail.name, __indexOf.call($scope.viewFilterValue, _ref) >= 0) {
              return true;
            }
          }
          if ($scope.viewFilterValue) {
            return thumbnail.proposed != null;
          }
          return true;
        };

        /*
         * SAVE
         */
        $scope.save = function(thumbnail) {
          var confirm_results, data, key, thumbnail_array, _i, _len;
          data = {
            'pte-action': 'confirm-images',
            'pte-nonce': nonces['pte-nonce'],
            id: id
          };
          thumbnail_array = [];
          if (!thumbnail) {
            angular.forEach($scope.thumbnails, function(thumb) {
              if (thumb.proposed) {
                thumbnail_array.push(thumb);
              }
            });
            if (thumbnail_array.length < 1) {
              return;
            }
          } else {
            thumbnail_array.push(thumbnail);
          }
          for (_i = 0, _len = thumbnail_array.length; _i < _len; _i++) {
            thumbnail = thumbnail_array[_i];
            key = 'pte-confirm[' + thumbnail.name + ']';
            data[key] = thumbnail.proposed.file;
          }
          $log.log(data);
          confirm_results = $scope.thumbnailResource.get(data, function() {
            return $scope.confirmResults(confirm_results);
          });
        };
        $scope.confirmResults = function(confirm_results) {
          var resetUrls, thumbnail, viewFilter, _i, _len, _ref, _ref1;
          if (!confirm_results.thumbnails) {
            $scope.setErrorMessage($scope.i18n.save_crop_problem);
            return;
          }
          viewFilter = [];
          resetUrls = [];
          _ref = $scope.thumbnails;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            thumbnail = _ref[_i];
            if (confirm_results.thumbnails[thumbnail.name]) {
              viewFilter.push(thumbnail.name);
              thumbnail.current = confirm_results.thumbnails[thumbnail.name].current;
              resetUrls.push(thumbnail.current.url);
              if ((_ref1 = thumbnail.proposed) != null ? _ref1.url : void 0) {
                resetUrls.push(thumbnail.proposed.url);
              }
              $scope.trash(thumbnail);
            }
          }
          if (confirm_results.immediate) {

          } else {
            checkFilter();
          }
          $filter('randomizeUrl')({
            reset: true,
            urls: resetUrls
          });
        };

        /*
         * Clean up procedures
         *
         * trash function just removes from view.
         * trashAll deletes from server, and we hook into the unload
         * event to cleanup after ourselves
         */
        $scope.trash = function(thumbnail) {
          if (typeof event !== "undefined" && event !== null) {
            if (typeof event.stopPropagation === "function") {
              event.stopPropagation();
            }
          }
          delete thumbnail.proposed;
          thumbnail.showProposed = false;
          return checkFilter();
        };
        checkFilter = function() {
          var thumbnail, _i, _len, _ref;
          _ref = $scope.thumbnails;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            thumbnail = _ref[_i];
            if (thumbnail.proposed) {
              return;
            }
          }
          return $scope.viewFilterValue = false;
        };
        $scope.trashAll = function() {
          deleteTemp();
          angular.forEach($scope.thumbnails, function(thumb) {
            return $scope.trash(thumb);
          });
          $filter('randomizeUrl')({
            reset: true
          });
        };
        deleteTemp = function() {
          var deleteResults;
          if ((typeof nonces !== "undefined" && nonces !== null ? nonces['pte-delete-nonce'] : void 0) == null) {
            return;
          }
          deleteResults = $.ajax(settings.ajaxurl, {
            async: false,
            data: {
              'action': 'pte_ajax',
              id: id,
              'pte-action': 'delete-images',
              'pte-nonce': nonces['pte-delete-nonce']
            }
          });
        };
        $(window).unload(function(event) {
          deleteTemp();
        });

        /*
         * Allow selecting based on the aspect ratio
         */
        $scope.aspectRatios = [];
        addToAspectRatios = function(thumb) {
          var ar, aspectRatio, _i, _len, _ref, _ref1;
          ar = thumb.width / thumb.height;
          if ((ar == null) || ar === Infinity) {
            return;
          }
          if (!thumb.crop || +thumb.crop < 1) {
            return;
          }
          _ref = $scope.aspectRatios;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            aspectRatio = _ref[_i];
            if ((ar - 0.01 < (_ref1 = aspectRatio.size) && _ref1 < ar + 0.01)) {
              aspectRatio.thumbnails.push(thumb.name);
              return;
            }
          }
          $scope.aspectRatios.push({
            size: ar,
            thumbnails: [thumb.name]
          });
        };

        /*
         * Initialization
         */
        id = settings.id;
        if (!id) {
          $log.error("No ID Found");
        }
        $scope.i18n = settings.i18n;
        $scope.infoMessage = null;
        $scope.setInfoMessage = function(message) {
          return $scope.infoMessage = message;
        };
        $scope.errorMessage = null;
        $scope.setErrorMessage = function(message) {
          return $scope.errorMessage = message;
        };
        nonces = null;
        $scope.setNonces = function(nonceObj) {
          return nonces = nonceObj;
        };
        $scope.thumbnails = [];
        $scope.thumbnailObject = $scope.thumbnailResource.get({
          id: id
        }, function() {
          angular.forEach($scope.thumbnailObject, function(thumb, name) {
            if (name !== "$promise" && name !== "$resolved") {
              thumb.name = name;
              this.thumbnails.push(thumb);
              addToAspectRatios(thumb);
            }
          }, $scope);
          $scope.updateSelected();
          $log.info("Disabling loading screen");
          $scope.changePage('crop');
        });
        $scope.anyProposed = function() {
          var thumb, _i, _len, _ref;
          _ref = $scope.thumbnails;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            thumb = _ref[_i];
            if (thumb.proposed != null) {
              return true;
            }
          }
          return false;
        };

        /*
         * Used to hide/show the existing thumbnails
         * 
         * @since 2.2.0
         */
        $scope.anySelected = function() {
          var thumb, _i, _len, _ref;
          _ref = $scope.thumbnails;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            thumb = _ref[_i];
            if (thumb.selected) {
              return true;
            }
          }
          return false;
        };

        /*
         * Update wordpress option when the currentThumbnailBarPosition changes
         */
        $scope.$watch('currentThumbnailBarPosition', function(x, y) {
          if (x === y) {
            return;
          }
          $scope.updateOptions({
            'pte_thumbnail_bar': $scope.currentThumbnailBarPosition
          });
        });
        $scope.toggleCurrentThumbnailBarPosition = function() {
          var positions;
          positions = ["vertical", "horizontal"];
          if ($scope.currentThumbnailBarPosition === positions[0]) {
            $scope.currentThumbnailBarPosition = positions[1];
          } else {
            $scope.currentThumbnailBarPosition = positions[0];
          }
        };

        /* STOP THE MADNESS */
      }
    ]);
    return app;
  });

}).call(this);
