// Generated by CoffeeScript 1.7.1
(function() {
  define(['cs!jquery', 'cs!settings', 'jcrop'], function($, settings) {
    var crop_options, jcrop, throttle;
    throttle = function(func, wait) {
      var args, context, later, previous, result, timeout, _ref;
      _ref = [], context = _ref[0], args = _ref[1], timeout = _ref[2], result = _ref[3];
      previous = 0;
      later = function() {
        previous = new Date;
        timeout = null;
        result = func.apply(context, args);
        return null;
      };
      return function() {
        var now, remaining;
        now = new Date;
        remaining = wait - (now - previous);
        context = this;
        args = arguments;
        if (remaining <= 0) {
          clearTimeout(timeout);
          timeout = null;
          previous = now;
          result = func.apply(context, args);
        } else if (!timeout) {
          timeout = setTimeout(later, remaining);
        }
        return result;
      };
    };
    jcrop = null;
    crop_options = {
      onChange: throttle(function() {
        var bgColor, changeBgColor, cropConstraints, crop_h, crop_w, h, isBad, is_ar_enforced, w, _ref;
        changeBgColor = function(color) {
          if (color !== bgColor) {
            jcrop.setOptions({
              bgColor: color
            });
          }
        };
        isBad = function() {
          var compare;
          compare = function(constraint, dimension) {
            if (constraint == null) {
              return true;
            }
            if (constraint === 0) {
              return false;
            }
            return constraint < dimension;
          };
          if (is_ar_enforced && compare(crop_w, w) && compare(crop_h, h)) {
            return false;
          }
          if (!is_ar_enforced && compare(crop_w, w) || compare(crop_h, h)) {
            return false;
          }
          return true;
        };
        cropConstraints = this.getOptions().cropConstraints;
        if (!cropConstraints) {
          changeBgColor('black');
          return;
        }
        crop_w = cropConstraints[0], crop_h = cropConstraints[1], is_ar_enforced = cropConstraints[2];
        bgColor = this.getOptions().bgColor;
        _ref = this.tellSelect(), w = _ref.w, h = _ref.h;
        if (isBad()) {
          changeBgColor('red');
        } else {
          changeBgColor('green');
        }
      }, 50),
      onRelease: function() {
        var h, w, x, x2, y, y2, _ref;
        _ref = this.tellSelect(), x = _ref.x, y = _ref.y, w = _ref.w, h = _ref.h, x2 = _ref.x2, y2 = _ref.y2;
        if (isNaN(x)) {
          return;
        }
        if (x !== 0 || y !== 0 || w !== 0 || h !== 0 || x2 !== 0 || y2 !== 0) {
          this.setSelect([0, 0, 0, 0, 0, 0]);
          this.release();
        }
      },
      trueSize: [settings.width, settings.height]
    };
    jcrop = $.Jcrop("#pte-preview", crop_options);
    jcrop.release();
    return jcrop;
  });

}).call(this);
